#+TITLE: Doom emacs config
#+AUTHOR: atwist227
#+PROPERTY: header-args:emacs-lisp :tangle config.el

本文档是我的 Doom Emacs 配置文件.
使用命令 ~M-x org-babel-tangle~ 生成配置文件。

* TODO 学习自动生成配置文件的方法，参考文档 [[https://tecosaur.github.io/emacs-config/config.html#personal-information][Doom Emacs Configuration]]

* 基础设置 (General Settings)
** 启用词法绑定
与动态绑定 (Dynamic Binding) 不同，不受调用栈影响。
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src
** 个人信息 (Personal Information)
用于 Emacs 的一些基本用户信息，比如 Git 提交时的作者信息。
#+BEGIN_SRC emacs-lisp
(setq user-full-name "atwist227"
      user-mail-address "atwist227@github.com")
#+END_SRC
** 编辑行为 (Editing Behavior)
*** 开启自动保存和备份
#+BEGIN_SRC emacs-lisp
(setq auto-save-default t
      make-backup-files t)
#+END_SRC
*** 关闭退出 Emacs 时的确认提示
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs nil)
#+END_SRC
** 外观 (Appearance)
*** 主题
设置 Doom Emacs 的主题。
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC
*** 字体
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
    (progn
      (setq doom-font (font-spec :family "JetBrainsMono NF" :size 13.0))
      (set-fontset-font "fontset-default" 'han (font-spec :family "Noto Sans CJK SC" :size 14.0))))
#+END_SRC
*** 开启行号显示
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC
* Doom 模块配置 (Doom Module Configuration)
** :editor
*** evil
#+BEGIN_SRC emacs-lisp
(after! evil
  (setq evil-move-cursor-back nil     ; don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil ; don't put overwritten text in the kill ring
        evil-want-fine-undo t
        evil-move-beyond-eol t
        ;; evil-want-minibuffer t
        +evil-want-o/O-to-continue-comments nil))
#+END_SRC
** ：lang
*** latex
#+BEGIN_SRC emacs-lisp
(after! tex
  ;; 启用 pdf-tools 显示 PDF
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

  ;; .bib 文件的位置
  ;; (setq reftex-default-bibliography "~/Seafile/THU研究生/Notes_latex/ref.bib")

  (setq TeX-electric-sub-and-superscript t)
  )
#+END_SRC
**** cdlatex
#+BEGIN_SRC emacs-lisp
(after! cdlatex
  (map! :map cdlatex-mode-map
        :i "TAB" #'cdlatex-tab)

  (setq cdlatex-math-modify-alist
        '((?b "\\mathbb" nil t nil nil)
          (?k "\\mathfrak" nil t nil nil)
          (?m "\\mathrr" nil t nil nil)
          (?o "\\operatorname" nil t nil nil)
          )
        cdlatex-math-symbol-alist
        '((?e ("\\varepsilon" "\\epsilon"))
          (?f ("\\varphi" "\\phi"))
          (?0 ("\\varnothing" "\\emptyset"))
          )
       ;; cdlatex-command-alist ;; expand with <TAB>
       ;; '(("eqn" "Insert an EQUATION* environment template" "" cdlatex-environment ("equation*") t nil)
       ;;   ("aln" "Insert an ALIGN* environment template" "" cdlatex-environment ("align*") t nil)
       ;;   ("op" "Insert \\operatorname{}()" "\\operatorname{?}()" cdlatex-position-cursor nil nil t)
       ;;  )
  ))
#+END_SRC
* 其他包 (other packages)
** emacs-rime
项目地址 [[https://github.com/DogLooksGood/emacs-rime][emacs-rime]]
#+begin_src emacs-lisp
(after! rime
  (setq default-input-method "rime")
  (setq rime-show-candidate 'posframe)
  (setq rime-user-data-dir "~/.local/share/rime/rime-data/") ; FIXME 根据主机配置调整
  (setq rime-disable-predicates
        '(rime-predicate-evil-mode-p
          rime-predicate-org-latex-mode-p
          rime-predicate-tex-math-or-command-p
          rime-predicate-in-code-string-p
          rime-predicate-after-alphabet-char-p
          rime-predicate-space-after-cc-p
          rime-predicate-punctuation-line-begin-p
          rime-predicate-punctuation-after-ascii-p))
  (setq mode-line-mule-info '((:eval (rime-lighter))))); 临时启用英文提示
#+end_src
* 其他 (Miscellaneous)
** wsl
*** 修复 Wayland 环境下的 PGTK 算术溢出错误
#+BEGIN_SRC emacs-lisp
(setq display-mm-dimensions-alist '(("wayland-0" . (366 . 260))))
#+END_SRC
** 快捷键设置
*** <SPC><TAB>切换输入法,<SPC><\>依旧可以使用
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Toggle input method"
      "TAB" #'toggle-input-method)
#+END_SRC
